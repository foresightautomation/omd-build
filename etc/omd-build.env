#
# This file contains variables used in all of the other scripts.
#
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/sbin:/usr/local/bin

[[ -z "$TOPDIR" ]] && TOPDIR=$(realpath $(dirname $0)/..)
PROG=$(basename $0 .sh)
TIMESTAMP=$(date +"%Y%m%y-%H%M%S")

# OS release and version at the bottom of file

# This is the logfile for this script
LOGFILE=$TOPDIR/$PROG.$TIMESTAMP.log


# Check to see if a package is installed
check4pkg() {
	if [[ "$OS_PKGTYPE" = "yum" ]]; then
		rpm -q "$1" >/dev/null 2>&1
	else
		dpkg-query -l "$1" >/dev/null 2>&1
	fi
}

installpkg() {
	out "installing $1 package"
	if [[ "$OS_PKGTYPE" = "yum" ]]; then
		yum -y install "$1" 2>&1 | verbout
	else
		apt -q -q -y install "$1" 2>&1 | verbout
	fi
}

checkandinstall() {
	typeset _i
	for _i in "$@" ; do
		if check4pkg "$_i" ; then
			out "package $_i already installed"
			continue
		fi
		installpkg "$_i" || return 1
	done
	return 0
}

chkandenableservice() {
	typeset _i
	typeset _s
	typeset _output
	for _i in "$@" ; do
		_output=$(systemctl status "$_i" 2>&1)
		_s=$?
		case $_s in
			0 ) out "$_ service enabled"
				;;
			3 ) out "enabling $_i service"
				systemctl enable "$_i" | verbout
				[[ $PIPESTATUS[0] -eq 0 ]] || return 1
				;;
			* )
				out "systemctl status returned $_s:"
				out "$_output"
				;;
		esac
	done
	return 0
}
		

# Functions
function section {
    echo "##" | tee -a $LOGFILE
	echo "## $PROG - $@" | tee -a $LOGFILE
    echo "##" | tee -a $LOGFILE
}

function out {
    echo "$@" | fmt | sed -e 's/^/# /' | tee -a $LOGFILE
}

function verbout {
	if [[ "$VERBOSE" = "1" ]]; then
		cat | tee -a $LOGFILE
	else
		cat >> $LOGFILE
	fi
}
##
## Cleanup
##
# Keep track of all of the tempfiles generated via newtempfile.
MY_TMPFILES=()

# This local_cleanup method should be overridden in the calling script
# to do more cleanup
function local_cleanup() {
   :
}

# This is the cleanup function that will run at the end of the script.
# DO NOT override this function.  Instead, override local_cleanup() if
# you need extra functionality.
function cleanup () {
    local_cleanup
    /bin/rm -f "${MY_TMPFILES[@]}"
}
trap cleanup 0
# Create a new temp file and put it into VAR
# newtempfile VAR
function newtempfile() {
    typeset F
    F=$(mktemp /tmp/XXXXXXXX)
    MY_TMPFILES+=($F)
    eval "${1}=$F"
}

# Log a message to the file.
# logit message
function logit {
    [[ -n "$LOGFILE" ]] || return
    echo $(date +"%Y-%m-%d %H:%M:%S") "$@" >> $LOGFILE
}
# Log an error message to the file.
function logerr {
    logit ERROR: "$@"
}
function logwarn {
    logit WARN: "$@"
}
function loginfo {
    logit INFO: "$@"
}

# Log messages to syslog
function sysloginfo {
    /usr/bin/logger -t $PROG -i -p user.info "$@"
}
function syslogwarn {
    /usr/bin/logger -t $PROG -i -p user.warning "WARNING: $@"
}
function syslogerr {
    /usr/bin/logger -t $PROG -i -p user.warning "ERROR: $@"
}

function logsummary {
    [[ -n "$LOGFILE" ]] || return
    echo "Logged to $LOGFILE."
}

# pause SECONDS
function pause {
    typeset _ANS
	# If we're not on a tty, don't pause.
	tty -s || return
	# If the --pause flag was given on the command line, then force a pause.
	# The FORCEPAUSE var must be set in every script.
	if [[ "$FORCEPAUSE" = "1" ]]; then
		read "Press enter to continue> " _ANS
		return
	fi
	# If a "suggested" pause was given, do it.
	if [[ -n "$1" ]] && test "$1" -eq "$1" 2>/dev/null ; then
		read -t $1 -p "Press enter to continue (${1}s)> " _ANS || echo ""
	fi
	# Otherwise, don't pause.
}

function getyn {
    typeset _ANS
	[[ "$ANSWERYES" = "1" ]] && return 0
	[[ -t 0 ]] && return 0
	read -p "$@ [y/N] " _ANS
	case "$_ANS" in
	    y* | Y* ) return 0 ;;
	esac
	return 1
}

# copy_site_file src dst
function copy_site_file {
    typeset _src="$1"
    typeset _dst="$2"
	typeset _mode="$3"
	typeset _ddir=$(dirname "$dst")
	[[ -z "$_mode" ]] && _mode=$(stat -c "%a" "$_src")
	if [[ ! -d "$_ddir" ]]; then
	    mkdir -p "$_ddir" || exit 1
		[[ $(id -u) -eq 0 ]] && chown ${OMD_SITE}.${OMD_SITE} "$_ddir"
	fi
	/bin/cp "$_src" "$_dst" || exit 1
	[[ $(id -u) -eq 0 ]] && chown ${OMD_SITE}.${OMD_SITE} "$_dst"
	chmod ${_mode} "$_dst"
}
##################################################################################################################################################################################################################
# Functions

# This function is here, because we use it to find some of the remaining
# vars
#
# Read a VAR=VAL from the file.  If INTO_VARNAME is provided, then
# use that instead of VARNAME. This reads the first var found.
#
# readVarValFromFile FILE VARNAME [INTO_VARNAME]
function readVarValFromFile {
    typeset _fname="$1"
    typeset _var="$2"
    typeset _newvar="${3:-$2}"
    typeset _jnk
    typeset _foundvar
    _foundvar=$(/usr/bin/egrep "^${_var}[ ]*=" "$_fname" 2>/dev/null | head -1)

    # Set the local IFS to a character that's not going to be in any of the 
    # strings
    local IFS=""

    # Replace the first '=' with our single character
    _foundvar=${_foundvar/=/}

    # use read to set our variable
    read _jnk $_newvar <<< "$_foundvar"
}


# myexit [xval]
function myexit {
    # If the first arg is set, set our XVAL to it.
    [[ -n "$1" ]] && XVAL="$1"

    [[ "$MY_NEEDS_RESTART" = "1" ]] && exit 99
    exit $XVAL
}

# 
# Backup a file by appending a timestamp.  Specify an optional dest 
# directory.  Sets the _NAG_BKUPFNAME to the backed up file name.
# NOTE:  if the backup file exists, assume we've already done a backup
# for this session.
# backup_file src [bkupdir]
function backup_file() {
    typeset _src="$1"
    # If there's no src, we're done
    [[ -f "$_src" ]] || return 0
    typeset _dst="$2"
    typeset _bkup=$(basename "$_src").$TIMESTAMP
    typeset _err=0
    _NAG_BKUPFNAME=
    [[ -z "$_dst" ]] && _dst=$(dirname "$_src")
    if [[ ! -d "$_dst" ]] ; then
        logerr "backup_file($@) - $_dst not a directory"
        return 2
    fi
    _NAG_BKUPFNAME="${_dst}/${_bkup}"
    # If it's already there, we're done.
    [[ -f "$_NAG_BKUPFNAME" ]] && return 0

    if ! /bin/cp -p "$_src" "${_NAG_BKUPFNAME}" ; then
        _err=$?
        logerr "could not copy $_src to ${_NAG_BKUPFNAME}"
        _NAG_BKUPFNAME=
        return $_err
    fi
    loginfo "backed up $_src to ${_NAG_BKUPFNAME}"
    return 0
}

#
# Compare the old file to the new file.  If there is a difference,
# then move the new file to the old file.
# diff_replace $old $new [$backupdir]
function diff_replace() {
    typeset _old="$1"
    typeset _new="$2"
    typeset _bkupdir="$3"
    typeset _err=0
    if [[ -f "$_new" ]] ; then
        logerr "${_new}: no such file"
        return 2
    fi
    if [[ ! -f "$_old" ]]; then
        /bin/mv "$_new" "$_old"
        _err=$?
        if [[ $_err -ne 0 ]]; then
            logerr "could not mv $_new $_old"
        fi
        return $_err
    fi
    diff -q "$_old" "$_new" 2>/dev/null && return 0
    backup_file "$_old" "$_bkupdir" || return 1
    chmod --reference="${_NAG_BKUPFNAME}" "$_old"
    chgrp --reference="${_NAG_BKUPFNAME}" "$_old"
    loginfo "updated $_old"
    return 0
}

function exit_if_empty() {
    [[ -n "$@" ]] && return 0
    echo "Exiting."
    exit 1
}

function check_for_file_or_dir() {
    [[ -f "$1" ]] && return 0
    [[ -d "$1" ]] && return 0
    return 1
}

# version_gt v2check v2compare
function version_gt() {
    test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1";
}

# Find the OS release information
readVarValFromFile /etc/os-release ID OS_ID
readVarValFromFile /etc/os-release VERSION_ID OS_VERS
readVarValFromFile /etc/os-release ID_LIKE OS_ID_LIKE
OS_ID=${OS_ID//\"}
OS_VERS=${OS_VERS//\"}
OS_ID_LIKE=${OS_ID_LIKE//\"}
# Figure out which pkgtypes we use
if [[ "$OS_ID_LIKE" == *rhel* ]]; then
    OS_PKGTYPE=yum
else
    # Just assume this now, as we'll be using either ubuntu20 or amazon linux 2.
    OS_PKGTYPE=apt
fi

# add_htpasswd_entry "file" "user" "encrypted-password"
function add_htpasswd_entry() {
    # See if the entry is there.  If it is, awk will exit 1, and
    # we will return 1.
    if [[ -f "$1" ]]; then
        awk -F: '$1 == "'$2'" { exit 1; }' "$1" >/dev/null || return 1
    fi
    #
    # It's not there.  Add the new one
    out "  adding/updating password for $2 ..."
    echo "${2}:$3" >> "$1"
}
